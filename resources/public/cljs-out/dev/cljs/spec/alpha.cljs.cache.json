["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$cat","~$*","~$or","~$merge","~$keys","~$+","~$and","~$def"]],"~:name","~$cljs.spec.alpha","~:imports",null,"~:requires",["^ ","~$cljs.core","^A","~$gobj","~$goog.object","^C","^C","~$walk","~$clojure.walk","~$gen","~$cljs.spec.gen.alpha","~$c","^A","~$str","~$clojure.string","^I","^I","^E","^E","^G","^G"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$->t_cljs$spec$alpha26037",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:anonymous",true,"~:protocols",["^6",["~$cljs.spec.alpha/Spec","~$cljs.core/IMeta","~$cljs.spec.alpha/Specize","~$cljs.core/IWithMeta"]],"~:skip-protocol-flag",["^6",["^S","^U"]],"~:factory","~:positional","~:arglists",["~#list",["~$quote",["^Z",[["~$forms","~$preds","~$gfn","~$specs","~$cform","~$meta26038"]]]]],"~:doc","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha26037.","~:file",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha26037","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","~:method-params",["^Z",[["^10","^11","^12","^13","^14","^15"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^P",true,"~:column",5,"~:variadic?",false,"^W","^X","~:line",780,"~:ret-tag","~$cljs.spec.alpha/t_cljs$spec$alpha26037","~:max-fixed-arity",6,"~:fn-var",true,"^Y",["^Z",["^[",["^Z",[["^10","^11","^12","^13","^14","^15"]]]]],"^V",["^6",["^S","^U"]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha26037."],"~$form",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",181,"^1<",7,"~:end-line",181,"~:end-column",11,"^Y",["^Z",["^[",["^Z",[["~$spec"]]]]],"^16","returns the spec as data"],"^=","~$cljs.spec.alpha/form","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",11,"^19",["^Z",[["^1F"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",181,"^1?","~$any","^1D",181,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F"]]]]],"^16","returns the spec as data"],"~$nilable-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1407,"^1<",19,"^1D",1407,"^1E",31,"~:skip-wiki",true,"^Y",["^Z",["^[",["^Z",[["^1C","~$pred","^12"]]]]],"^16","Do not call this directly, use 'nilable'"],"^=","~$cljs.spec.alpha/nilable-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",31,"^19",["^Z",[["^1C","^1K","^12"]]],"^1:",null,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1407,"^1?","~$cljs.spec.alpha/t_cljs$spec$alpha26272","^1D",1407,"^1A",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1C","^1K","^12"]]]]],"^16","Do not call this directly, use 'nilable'"],"~$*recursion-limit*",["^ ","^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",21,"^1<",16,"^1D",21,"^1E",33,"~:dynamic",true],"^=","~$cljs.spec.alpha/*recursion-limit*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",33,"^1<",1,"^1O",true,"^1>",21,"^1D",21,"~:tag","~$number","^16","A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."],"~$*coll-error-limit*",["^ ","^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",35,"^1<",16,"^1D",35,"^1E",34,"^1O",true],"^=","~$cljs.spec.alpha/*coll-error-limit*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",34,"^1<",1,"^1O",true,"^1>",35,"^1D",35,"^1Q","^1R","^16","The number of errors reported by explain in a collection spec'ed with 'every'"],"~$empty-coll",["^ ","^=","~$cljs.spec.alpha/empty-coll","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",841,"^1<",1,"^1D",841,"^1E",26,"~:private",true,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",841,"^1<",16,"^1D",841,"^1E",26,"^1W",true],"^1Q","~$cljs.core/IMap"],"~$->t_cljs$spec$alpha25889",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["~$keys->specnames","~$opt","~$req-un","~$opt-un","^12","~$map__25887","~$pred-exprs","~$keys-pred","~$argm","~$opt-keys","~$req-specs","~$req","~$id","~$req-keys","~$p__25886","~$opt-specs","~$k->s","~$pred-forms","~$meta25890"]]]]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha25889.","^17",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha25889","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^19",["^Z",[["^1Z","^1[","^20","^21","^12","^22","^23","^24","^25","^26","^27","^28","^29","^2:","^2;","^2<","^2=","^2>","^2?"]]],"^1:",null,"^1;",["^Z",[null,null]],"^P",true,"^1<",5,"^1=",false,"^W","^X","^1>",430,"^1?","~$cljs.spec.alpha/t_cljs$spec$alpha25889","^1A",19,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1Z","^1[","^20","^21","^12","^22","^23","^24","^25","^26","^27","^28","^29","^2:","^2;","^2<","^2=","^2>","^2?"]]]]],"^V",["^6",["^S","^U"]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha25889."],"~$explain-printer",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",235,"^1<",7,"^1D",235,"^1E",22,"^Y",["^Z",["^[",["^Z",[["~$ed"]]]]],"^16","Default printer for explain-data. nil indicates a successful validation."],"^=","~$cljs.spec.alpha/explain-printer","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",22,"^19",["^Z",[["^2C"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",235,"^1?","~$clj-nil","^1D",235,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^2C"]]]]],"^16","Default printer for explain-data. nil indicates a successful validation."],"~$op-explain",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1159,"^1<",8,"^1D",1159,"^1E",18,"^1W",true,"^Y",["^Z",["^[",["^Z",[["^1C","~$p","~$path","~$via","~$in","~$input"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/op-explain","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",18,"^19",["^Z",[["^1C","~$p","^2G","^2H","^2I","^2J"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1159,"^1?",["^6",["~$cljs.core/IVector","^1H","^2E"]],"^1D",1159,"^1A",6,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1C","~$p","^2G","^2H","^2I","^2J"]]]]]],"~$Specize",["^ ","^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",131,"^1<",14,"^1D",131,"^1E",21,"~:protocol-symbol",true,"~:jsdoc",["^Z",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$specize*",[["~$_"],["~$_","^1C"]]]]],"^2N",true,"^=","^T","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",21,"^1<",1,"^1>",131,"^2P",["^ ","^2Q",["^ ","^2R",[["~$_"],["~$_","^1C"]]]],"~:info",null,"^1D",131,"^1Q","^1H","~:impls",["^6",["~$cljs.spec.alpha/t_cljs$spec$alpha25956","~$cljs.spec.alpha/t_cljs$spec$alpha26063","^2A","~$cljs.core/Keyword","~$cljs.spec.alpha/t_cljs$spec$alpha26051","~$cljs.spec.alpha/t_cljs$spec$alpha25979","^1@","~$cljs.spec.alpha/t_cljs$spec$alpha26237","~$default","~$cljs.spec.alpha/t_cljs$spec$alpha26269","~$cljs.spec.alpha/t_cljs$spec$alpha26244","~$cljs.spec.alpha/t_cljs$spec$alpha25970","~$cljs.core/PersistentHashSet","~$cljs.core/PersistentTreeSet","~$cljs.core/Symbol","~$cljs.spec.alpha/t_cljs$spec$alpha25945","^1M"]],"^2O",["^Z",["@interface"]]],"~$t_cljs$spec$alpha26051",["^ ","~:num-fields",4,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^2X","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","~:type",true,"^P",true,"^1<",3,"^1>",816,"~:record",false,"^1Q","~$function","^V",["^6",["^S","^U"]]],"~$alt-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1044,"^1<",19,"^1D",1044,"^1E",27,"^1J",true,"^Y",["^Z",["^[",["^Z",[["~$ks","~$ps","^10"]]]]],"^16","Do not call this directly, use 'alt'"],"^=","~$cljs.spec.alpha/alt-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",27,"^19",["^Z",[["^3=","^3>","^10"]]],"^1:",null,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1044,"^1?",["^6",["~$clj","^1H"]],"^1D",1044,"^1A",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^3=","^3>","^10"]]]]],"^16","Do not call this directly, use 'alt'"],"~$tagged-ret",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",656,"^1<",8,"^1D",656,"^1E",18,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$tag","~$ret"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/tagged-ret","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",18,"^19",["^Z",[["^3B","^3C"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",656,"^1?","~$cljs.core/MapEntry","^1D",656,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^3B","^3C"]]]]]],"~$t_cljs$spec$alpha25945",["^ ","^38",6,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^36","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^39",true,"^P",true,"^1<",6,"^1>",520,"^3:",false,"^1Q","^3;","^V",["^6",["^S","^U"]]],"~$pvalid?",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",380,"^1<",8,"^1D",380,"^1E",15,"^1W",true,"^Y",["^Z",["^[",["^Z",[["^1K","~$x"],["^1K","~$x","^1C"]]]]],"^16","internal helper function that returns true when x is valid for spec.","~:top-fn",["^ ","^1=",false,"~:fixed-arity",3,"^1A",3,"^19",["^Z",[["^1K","~$x"],["^1K","~$x","^1C"]]],"^Y",["^Z",[["^1K","~$x"],["^1K","~$x","^1C"]]],"^1;",["^Z",[null,null]]]],"^1W",true,"^=","~$cljs.spec.alpha/pvalid?","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",15,"^3H",["^ ","^1=",false,"^3I",3,"^1A",3,"^19",["^Z",[["^1K","~$x"],["^1K","~$x","^1C"]]],"^Y",["^Z",[["^1K","~$x"],["^1K","~$x","^1C"]]],"^1;",["^Z",[null,null]]],"^19",["^Z",[["^1K","~$x"],["^1K","~$x","^1C"]]],"^1:",null,"^3I",3,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^2Q",[["^ ","^3I",2,"^1=",false,"^1Q","~$boolean"],["^ ","^3I",3,"^1=",false,"^1Q","^3K"]],"^1>",380,"^1D",380,"^1A",3,"^1B",true,"^Y",["^Z",[["^1K","~$x"],["^1K","~$x","^1C"]]],"^16","internal helper function that returns true when x is valid for spec."],"~$->t_cljs$spec$alpha26269",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^1F","~$meta26270"]]]]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha26269.","^17",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha26269","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^19",["^Z",[["^1F","^3M"]]],"^1:",null,"^1;",["^Z",[null,null]],"^P",true,"^1<",5,"^1=",false,"^W","^X","^1>",1391,"^1?","^30","^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","^3M"]]]]],"^V",["^6",["^S","^U"]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha26269."],"~$def-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",306,"^1<",19,"^1D",306,"^1E",27,"^1J",true,"^Y",["^Z",["^[",["^Z",[["~$k","^1C","^1F"]]]]],"^16","Do not call this directly, use 'def'"],"^=","~$cljs.spec.alpha/def-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",27,"^19",["^Z",[["~$k","^1C","^1F"]]],"^1:",null,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",306,"^1D",306,"^1A",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$k","^1C","^1F"]]]]],"^16","Do not call this directly, use 'def'"],"~$*explain-out*",["^ ","^=","~$cljs.spec.alpha/*explain-out*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",262,"^1<",1,"^1D",262,"^1E",29,"^1O",true,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",262,"^1<",16,"^1D",262,"^1E",29,"^1O",true]],"~$*runtime-asserts*",["^ ","^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1479,"^1<",3,"^1D",1479,"^1E",20,"^1W",true,"^1O",true],"^1W",true,"^=","~$cljs.spec.alpha/*runtime-asserts*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",20,"^1<",1,"^1O",true,"^1>",1477,"^1D",1479,"^1Q","^3K"],"~$regex-spec-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1291,"^1<",19,"^1D",1291,"^1E",34,"^1J",true,"^Y",["^Z",["^[",["^Z",[["~$re","^12"]]]]],"^16","Do not call this directly, use 'spec' with a regex op argument"],"^=","~$cljs.spec.alpha/regex-spec-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",34,"^19",["^Z",[["^3V","^12"]]],"^1:",null,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1291,"^1?","^2Z","^1D",1291,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^3V","^12"]]]]],"^16","Do not call this directly, use 'spec' with a regex op argument"],"~$merge-spec-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",813,"^1<",19,"^1D",813,"^1E",34,"^1J",true,"^Y",["^Z",["^[",["^Z",[["^10","^11","^12"]]]]],"^16","Do not call this directly, use 'merge'"],"^=","~$cljs.spec.alpha/merge-spec-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",34,"^19",["^Z",[["^10","^11","^12"]]],"^1:",null,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",813,"^1?","^2X","^1D",813,"^1A",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^10","^11","^12"]]]]],"^16","Do not call this directly, use 'merge'"],"~$explain-data*",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",219,"^1<",7,"^1D",219,"^1E",20,"^Y",["^Z",["^[",["^Z",[["^1F","^2G","^2H","^2I","~$x"]]]]]],"^=","~$cljs.spec.alpha/explain-data*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",20,"^19",["^Z",[["^1F","^2G","^2H","^2I","~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",219,"^1?",["^6",["^1X","^2E"]],"^1D",219,"^1A",5,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","^2G","^2H","^2I","~$x"]]]]]],"~$add-ret",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1110,"^1<",8,"^1D",1110,"^1E",15,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$p","~$r","~$k"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/add-ret","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",15,"^19",["^Z",[["~$p","~$r","~$k"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1110,"^1?",["^6",[null,"^3@","^1H"]],"^1D",1110,"^1A",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$p","~$r","~$k"]]]]]],"~$explain-pred-list",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",738,"^1<",8,"^1D",738,"^1E",25,"^1W",true,"^Y",["^Z",["^[",["^Z",[["^10","^11","^2G","^2H","^2I","~$x"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/explain-pred-list","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",25,"^19",["^Z",[["^10","^11","^2G","^2H","^2I","~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",738,"^1?",["^6",["^2L","^1H","^2E"]],"^1D",738,"^1A",6,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^10","^11","^2G","^2H","^2I","~$x"]]]]]],"~$MAX_INT",["^ ","^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",19,"^1<",14,"^1D",19,"^1E",21,"~:const",true],"^=","~$cljs.spec.alpha/MAX_INT","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",21,"~:const-expr",["^ ","~:op","^45","~:val",9007199254740991,"~:env",["^ ","~:context","~:expr"],"~:form",9007199254740991,"^1Q","^1R"],"^1<",1,"^45",true,"^1>",19,"^1D",19,"^1Q","^1R"],"~$check-asserts",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1487,"^1<",7,"^1D",1487,"^1E",20,"^Y",["^Z",["^[",["^Z",[["~$flag"]]]]],"^16","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"^=","~$cljs.spec.alpha/check-asserts","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",20,"^19",["^Z",[["^4?"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1487,"^1D",1487,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^4?"]]]]],"^16","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"~$alt2",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1042,"^1<",8,"^1D",1042,"^1E",12,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$p1","~$p2"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/alt2","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",12,"^19",["^Z",[["^4B","^4C"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1042,"^1?",["^6",[null,"^1H","^1X","^2E"]],"^1D",1042,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^4B","^4C"]]]]]],"~$and-k-gen",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",417,"^1<",8,"^1D",417,"^1E",17,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$s"]]]]],"^16","returns a tuple generator made up of generators for every element\n  in s."],"^1W",true,"^=","~$cljs.spec.alpha/and-k-gen","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",17,"^19",["^Z",[["~$s"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",417,"^1?","^1H","^1D",417,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$s"]]]]],"^16","returns a tuple generator made up of generators for every element\n  in s."],"~$t_cljs$spec$alpha25979",["^ ","^38",9,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^2Y","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^39",true,"^P",true,"^1<",5,"^1>",697,"^3:",false,"^1Q","^3;","^V",["^6",["^S","^U"]]],"~$assert*",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1495,"^1<",7,"^1D",1495,"^1E",14,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"]]]]],"^16","Do not call this directly, use 'assert'."],"^=","~$cljs.spec.alpha/assert*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",14,"^19",["^Z",[["^1F","~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1495,"^1D",1495,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"]]]]],"^16","Do not call this directly, use 'assert'."],"~$fn-sym",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",123,"^1<",8,"^1D",123,"^1E",14,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$f-n"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/fn-sym","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",14,"^19",["^Z",[["^4K"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",123,"^1?",["^6",["^1H","^35","^2E"]],"^1D",123,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^4K"]]]]]],"~$inst-in-range?",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1442,"^1<",7,"^1D",1442,"^1E",21,"^Y",["^Z",["^[",["^Z",[["~$start","~$end","~$inst"]]]]],"^16","Return true if inst at or after start and before end"],"^=","~$cljs.spec.alpha/inst-in-range?","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",21,"^19",["^Z",[["^4N","^4O","^4P"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1442,"^1?","^3K","^1D",1442,"^1A",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^4N","^4O","^4P"]]]]],"^16","Return true if inst at or after start and before end"],"~$registry-ref",["^ ","^=","~$cljs.spec.alpha/registry-ref","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",47,"^1<",1,"^1D",47,"^1E",32,"^1W",true,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",47,"^1<",20,"^1D",47,"^1E",32,"^1W",true],"^1Q","~$cljs.core/Atom"],"~$accept?",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",979,"^1<",8,"^1D",979,"^1E",15,"^1W",true,"^Y",["^Z",["^[",["^Z",[[["^ ","~:keys",["~:cljs.spec.alpha/op"]]]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/accept?","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",15,"^19",["^Z",[["~$p__26112"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",979,"^1?","^3K","^1D",979,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^4V",["^4W"]]]]]]]],"~$and-spec-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",749,"^1<",19,"^1D",749,"^1E",32,"^1J",true,"^Y",["^Z",["^[",["^Z",[["^10","^11","^12"]]]]],"^16","Do not call this directly, use 'and'"],"^=","~$cljs.spec.alpha/and-spec-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",32,"^19",["^Z",[["^10","^11","^12"]]],"^1:",null,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",749,"^1?","^1@","^1D",749,"^1A",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^10","^11","^12"]]]]],"^16","Do not call this directly, use 'and'"],"~$accept",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",977,"^1<",8,"^1D",977,"^1E",14,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/accept","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",14,"^19",["^Z",[["~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",977,"^1?","^1X","^1D",977,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]]],"~$recur-limit?",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",351,"^1<",8,"^1D",351,"^1E",20,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$rmap","^29","^2G","~$k"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/recur-limit?","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",20,"^19",["^Z",[["^53","^29","^2G","~$k"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",351,"^1?","^3K","^1D",351,"^1A",4,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^53","^29","^2G","~$k"]]]]]],"~$describe*",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",45,"^1<",4,"^1D",45,"^1E",13,"~:protocol","^R","^16",null,"^Y",["^Z",["^[",["^Z",[["^1F"]]]]]],"^56","^R","^=","~$cljs.spec.alpha/describe*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",13,"^19",["^Z",[["^1F"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",39,"^1?","^1H","^1D",45,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F"]]]]],"^16",null],"~$map-spec-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",423,"^1<",19,"^1D",423,"^1E",32,"^1J",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^4V",["^20","^21","^24","^23","^26","^27","^28","^2:","^2<","^2>","^1[","^12"],"~:as","^25"]]]]]],"^16","Do not call this directly, use 'spec' with a map argument"],"^=","~$cljs.spec.alpha/map-spec-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",32,"^19",["^Z",[["^2;"]]],"^1:",null,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",423,"^1?","^2A","^1D",423,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^4V",["^20","^21","^24","^23","^26","^27","^28","^2:","^2<","^2>","^1[","^12"],"^59","^25"]]]]]],"^16","Do not call this directly, use 'spec' with a map argument"],"~$reg-resolve!",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",66,"^1<",8,"^1D",66,"^1E",20,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$k"]]]]],"^16","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"^1W",true,"^=","~$cljs.spec.alpha/reg-resolve!","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",20,"^19",["^Z",[["~$k"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",66,"^1?",["^6",[null,"^1H"]],"^1D",66,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$k"]]]]],"^16","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"~$re-explain",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1265,"^1<",8,"^1D",1265,"^1E",18,"^1W",true,"^Y",["^Z",["^[",["^Z",[["^2G","^2H","^2I","^3V","^2J"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/re-explain","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",18,"^19",["^Z",[["^2G","^2H","^2I","^3V","^2J"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1265,"^1?",["^6",["^2L","^1H","^2E"]],"^1D",1265,"^1A",5,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^2G","^2H","^2I","^3V","^2J"]]]]]],"~$t_cljs$spec$alpha26237",["^ ","^38",3,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^2Z","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^39",true,"^P",true,"^1<",3,"^1>",1294,"^3:",false,"^1Q","^3;","^V",["^6",["^S","^U"]]],"~$alts",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1041,"^1<",8,"^1D",1041,"^1E",12,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$&","^3>"]]]]],"^3H",["^ ","^1=",true,"^3I",0,"^1A",0,"^19",[["^Z",["^3>"]]],"^Y",["^Z",[["~$&","^3>"]]],"^1;",["^Z",[null]]]],"^1W",true,"^=","~$cljs.spec.alpha/alts","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",12,"^3H",["^ ","^1=",true,"^3I",0,"^1A",0,"^19",[["^Z",["^3>"]]],"^Y",["^Z",[["~$&","^3>"]]],"^1;",["^Z",[null]]],"^19",[["^Z",["^3>"]]],"^1:",null,"^3I",0,"^1;",["^Z",[null]],"^1<",1,"^1=",true,"^2Q",[["^ ","^3I",0,"^1=",true,"^1Q",["^6",["^1H","^1X","^2E"]]]],"^1>",1041,"^1?","^1H","^1D",1041,"^1A",0,"^1B",true,"^Y",["^Z",[["~$&","^3>"]]]],"~$->t_cljs$spec$alpha26244",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U","~$cljs.core/ILookup"]],"^V",["^6",["^S","^U","^5C"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["~$argspec","~$aform","~$retspec","~$rform","~$fnspec","~$fform","^12","^13","~$meta26245"]]]]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha26244.","^17",null],"^Q",["^6",["^R","^S","^T","^U","^5C"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha26244","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^19",["^Z",[["^5D","^5E","^5F","^5G","^5H","^5I","^12","^13","^5J"]]],"^1:",null,"^1;",["^Z",[null,null]],"^P",true,"^1<",5,"^1=",false,"^W","^X","^1>",1343,"^1?","^31","^1A",9,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^5D","^5E","^5F","^5G","^5H","^5I","^12","^13","^5J"]]]]],"^V",["^6",["^S","^U","^5C"]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha26244."],"~$t_cljs$spec$alpha25956",["^ ","^38",9,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^2U","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^39",true,"^P",true,"^1<",6,"^1>",556,"^3:",false,"^1Q","^3;","^V",["^6",["^S","^U"]]],"~$with-name",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",85,"^1<",8,"^1D",85,"^1E",17,"^1W",true,"^Y",["^Z",["^[",["^Z",[["^1F","~$name"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/with-name","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",17,"^19",["^Z",[["^1F","^5N"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",85,"^1?",["^6",["^3@","^1H","^2W","^35","~$cljs.core/MetaFn","^2E"]],"^1D",85,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","^5N"]]]]]],"~$explain",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",270,"^1<",7,"^1D",270,"^1E",14,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"]]]]],"^16","Given a spec and a value that fails to conform, prints an explanation to *out*."],"^=","~$cljs.spec.alpha/explain","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",14,"^19",["^Z",[["^1F","~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",270,"^1?","^1H","^1D",270,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"]]]]],"^16","Given a spec and a value that fails to conform, prints an explanation to *out*."],"~$spec-name",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",93,"^1<",8,"^1D",93,"^1E",17,"^1W",true,"^Y",["^Z",["^[",["^Z",[["^1F"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/spec-name","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",17,"^19",["^Z",[["^1F"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",93,"^1?",["^6",["^1H","^2W","^35","^2E"]],"^1D",93,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F"]]]]]],"~$map-spec",["^ ","^=","~$cljs.spec.alpha/map-spec","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",335,"^1<",1,"^1D",335,"^1E",18,"~:declared",true,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",335,"^1<",10,"^1D",335,"^1E",18,"^5W",true]],"~$with-gen*",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",44,"^1<",4,"^1D",44,"^1E",13,"^56","^R","^16",null,"^Y",["^Z",["^[",["^Z",[["^1F","^12"]]]]]],"^56","^R","^=","~$cljs.spec.alpha/with-gen*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",13,"^19",["^Z",[["^1F","^12"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",39,"^1?","^1H","^1D",44,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","^12"]]]]],"^16",null],"~$k-gen",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",397,"^1<",8,"^1D",397,"^1E",13,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$f"]]]]],"^16","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"^1W",true,"^=","~$cljs.spec.alpha/k-gen","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",13,"^19",["^Z",[["~$f"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",397,"^1?",["^6",["^1H","^2E"]],"^1D",397,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$f"]]]]],"^16","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"~$or-spec-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",659,"^1<",19,"^1D",659,"^1E",31,"^1J",true,"^Y",["^Z",["^[",["^Z",[["^:","^10","^11","^12"]]]]],"^16","Do not call this directly, use 'or'"],"^=","~$cljs.spec.alpha/or-spec-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",31,"^19",["^Z",[["^:","^10","^11","^12"]]],"^1:",null,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",659,"^1?","^2Y","^1D",659,"^1A",4,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^:","^10","^11","^12"]]]]],"^16","Do not call this directly, use 'or'"],"~$specize",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",159,"^1<",8,"^1D",159,"^1E",15,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$s"],["~$s","^1C"]]]]],"^3H",["^ ","^1=",false,"^3I",2,"^1A",2,"^19",["^Z",[["~$s"],["~$s","^1C"]]],"^Y",["^Z",[["~$s"],["~$s","^1C"]]],"^1;",["^Z",[null,null]]]],"^1W",true,"^=","~$cljs.spec.alpha/specize","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",15,"^3H",["^ ","^1=",false,"^3I",2,"^1A",2,"^19",["^Z",[["~$s"],["~$s","^1C"]]],"^Y",["^Z",[["~$s"],["~$s","^1C"]]],"^1;",["^Z",[null,null]]],"^19",["^Z",[["~$s"],["~$s","^1C"]]],"^1:",null,"^3I",2,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^2Q",[["^ ","^3I",1,"^1=",false,"^1Q",["^6",[null,"^1H","^2E"]]],["^ ","^3I",2,"^1=",false,"^1Q",["^6",[null,"^1H","^2E"]]]],"^1>",159,"^1D",159,"^1A",2,"^1B",true,"^Y",["^Z",[["~$s"],["~$s","^1C"]]]],"~$t_cljs$spec$alpha25970",["^ ","^38",6,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^32","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^39",true,"^P",true,"^1<",6,"^1>",600,"^3:",false,"^1Q","^3;","^V",["^6",["^S","^U"]]],"~$*fspec-iterations*",["^ ","^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",27,"^1<",16,"^1D",27,"^1E",34,"^1O",true],"^=","~$cljs.spec.alpha/*fspec-iterations*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",34,"^1<",1,"^1O",true,"^1>",27,"^1D",27,"^1Q","^1R","^16","The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"],"~$Spec",["^ ","^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",39,"^1<",14,"^1D",39,"^1E",18,"^2N",true,"^2O",["^Z",["@interface"]],"^2P",["^ ","^2Q",["^ ","~$conform*",[["^1F","~$x"]],"~$unform*",[["^1F","~$y"]],"~$explain*",[["^1F","^2G","^2H","^2I","~$x"]],"~$gen*",[["^1F","~$overrides","^2G","^53"]],"^5X",[["^1F","^12"]],"^55",[["^1F"]]]]],"^2N",true,"^=","^R","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",18,"^1<",1,"^1>",39,"^2P",["^ ","^2Q",["^ ","^68",[["^1F","~$x"]],"^69",[["^1F","~$y"]],"^6:",[["^1F","^2G","^2H","^2I","~$x"]],"^6;",[["^1F","^6<","^2G","^53"]],"^5X",[["^1F","^12"]],"^55",[["^1F"]]]],"^2S",null,"^1D",39,"^1Q","^1H","^2T",["^6",["^2U","^2V","^2A","^2X","^2Y","^1@","^2Z","^30","^31","^32","^36","^1M"]],"^2O",["^Z",["@interface"]]],"~$unform",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",174,"^1<",7,"^1D",174,"^1E",13,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"]]]]],"^16","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"^=","~$cljs.spec.alpha/unform","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",13,"^19",["^Z",[["^1F","~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",174,"^1?","^1H","^1D",174,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"]]]]],"^16","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"~$valid?",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",371,"^1<",7,"^1D",371,"^1E",13,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"],["^1F","~$x","^1C"]]]]],"^16","Helper function that returns true when x is valid for spec.","^3H",["^ ","^1=",false,"^3I",3,"^1A",3,"^19",["^Z",[["^1F","~$x"],["^1F","~$x","^1C"]]],"^Y",["^Z",[["^1F","~$x"],["^1F","~$x","^1C"]]],"^1;",["^Z",[null,null]]]],"^=","~$cljs.spec.alpha/valid?","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",13,"^3H",["^ ","^1=",false,"^3I",3,"^1A",3,"^19",["^Z",[["^1F","~$x"],["^1F","~$x","^1C"]]],"^Y",["^Z",[["^1F","~$x"],["^1F","~$x","^1C"]]],"^1;",["^Z",[null,null]]],"^19",["^Z",[["^1F","~$x"],["^1F","~$x","^1C"]]],"^1:",null,"^3I",3,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^2Q",[["^ ","^3I",2,"^1=",false,"^1Q","^3K"],["^ ","^3I",3,"^1=",false,"^1Q","^3K"]],"^1>",371,"^1D",371,"^1A",3,"^1B",true,"^Y",["^Z",[["^1F","~$x"],["^1F","~$x","^1C"]]],"^16","Helper function that returns true when x is valid for spec."],"^F",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",293,"^1<",7,"^1D",293,"^1E",10,"^Y",["^Z",["^[",["^Z",[["^1F"],["^1F","^6<"]]]]],"^16","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)","^3H",["^ ","^1=",false,"^3I",2,"^1A",2,"^19",["^Z",[["^1F"],["^1F","^6<"]]],"^Y",["^Z",[["^1F"],["^1F","^6<"]]],"^1;",["^Z",[null,null]]]],"^=","~$cljs.spec.alpha/gen","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",10,"^3H",["^ ","^1=",false,"^3I",2,"^1A",2,"^19",["^Z",[["^1F"],["^1F","^6<"]]],"^Y",["^Z",[["^1F"],["^1F","^6<"]]],"^1;",["^Z",[null,null]]],"^19",["^Z",[["^1F"],["^1F","^6<"]]],"^1:",null,"^3I",2,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^2Q",[["^ ","^3I",1,"^1=",false,"^1Q","^1H"],["^ ","^3I",2,"^1=",false,"^1Q","^1H"]],"^1>",293,"^1D",293,"^1A",2,"^1B",true,"^Y",["^Z",[["^1F"],["^1F","^6<"]]],"^16","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)"],"~$nonconforming",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1386,"^1<",7,"^1D",1386,"^1E",20,"^Y",["^Z",["^[",["^Z",[["^1F"]]]]],"^16","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"^=","~$cljs.spec.alpha/nonconforming","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",20,"^19",["^Z",[["^1F"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1386,"^1?","^30","^1D",1386,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F"]]]]],"^16","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"^69",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",41,"^1<",4,"^1D",41,"^1E",11,"^56","^R","^16",null,"^Y",["^Z",["^[",["^Z",[["^1F","~$y"]]]]]],"^56","^R","^=","~$cljs.spec.alpha/unform*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",11,"^19",["^Z",[["^1F","~$y"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",39,"^1?","^1H","^1D",41,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","~$y"]]]]],"^16",null],"~$->sym",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",323,"^1<",8,"^1D",323,"^1E",13,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]],"^16","Returns a symbol from a symbol or var"],"^1W",true,"^=","~$cljs.spec.alpha/->sym","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",13,"^19",["^Z",[["~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",323,"^1?",["^6",[null,"^1H"]],"^1D",323,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]],"^16","Returns a symbol from a symbol or var"],"~$abbrev",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",187,"^1<",7,"^1D",187,"^1E",13,"^Y",["^Z",["^[",["^Z",[["^1C"]]]]]],"^=","~$cljs.spec.alpha/abbrev","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",13,"^19",["^Z",[["^1C"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",187,"^1?",["^6",[null,"^1H","^35"]],"^1D",187,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1C"]]]]]],"~$regex?",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",80,"^1<",7,"^1D",80,"^1E",13,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]],"^16","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"^=","~$cljs.spec.alpha/regex?","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",13,"^19",["^Z",[["~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",80,"^1?",["^6",[null,"^1H"]],"^1D",80,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]],"^16","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"~$->t_cljs$spec$alpha25956",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^1C","~$mmvar","~$retag","^12","^29","~$predx","~$dval","^3B","~$meta25957"]]]]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha25956.","^17",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha25956","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^19",["^Z",[["^1C","^6L","^6M","^12","^29","^6N","^6O","^3B","^6P"]]],"^1:",null,"^1;",["^Z",[null,null]],"^P",true,"^1<",6,"^1=",false,"^W","^X","^1>",556,"^1?","^2U","^1A",9,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1C","^6L","^6M","^12","^29","^6N","^6O","^3B","^6P"]]]]],"^V",["^6",["^S","^U"]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha25956."],"~$->t_cljs$spec$alpha26237",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^3V","^12","~$meta26238"]]]]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha26237.","^17",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha26237","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^19",["^Z",[["^3V","^12","^6S"]]],"^1:",null,"^1;",["^Z",[null,null]],"^P",true,"^1<",3,"^1=",false,"^W","^X","^1>",1294,"^1?","^2Z","^1A",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^3V","^12","^6S"]]]]],"^V",["^6",["^S","^U"]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha26237."],"~$or-k-gen",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",406,"^1<",8,"^1D",406,"^1E",16,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$s"],["~$min-count","~$s"]]]]],"^16","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s.","^3H",["^ ","^1=",false,"^3I",2,"^1A",2,"^19",["^Z",[["~$s"],["^6V","~$s"]]],"^Y",["^Z",[["~$s"],["^6V","~$s"]]],"^1;",["^Z",[null,null]]]],"^1W",true,"^=","~$cljs.spec.alpha/or-k-gen","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",16,"^3H",["^ ","^1=",false,"^3I",2,"^1A",2,"^19",["^Z",[["~$s"],["^6V","~$s"]]],"^Y",["^Z",[["~$s"],["^6V","~$s"]]],"^1;",["^Z",[null,null]]],"^19",["^Z",[["~$s"],["^6V","~$s"]]],"^1:",null,"^3I",2,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^2Q",[["^ ","^3I",1,"^1=",false,"^1Q","^1H"],["^ ","^3I",2,"^1=",false,"^1Q","^1H"]],"^1>",406,"^1D",406,"^1A",2,"^1B",true,"^Y",["^Z",[["~$s"],["^6V","~$s"]]],"^16","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s."],"~$int-in-range?",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1449,"^1<",7,"^1D",1449,"^1E",20,"^Y",["^Z",["^[",["^Z",[["^4N","^4O","~$val"]]]]],"^16","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"^=","~$cljs.spec.alpha/int-in-range?","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",20,"^19",["^Z",[["^4N","^4O","^6Y"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1449,"^1?",["^6",["^3K","^1H"]],"^1D",1449,"^1A",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^4N","^4O","^6Y"]]]]],"^16","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"~$->t_cljs$spec$alpha26272",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^1C","^1K","^12","^1F","~$meta26273"]]]]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha26272.","^17",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha26272","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^19",["^Z",[["^1C","^1K","^12","^1F","^70"]]],"^1:",null,"^1;",["^Z",[null,null]],"^P",true,"^1<",5,"^1=",false,"^W","^X","^1>",1411,"^1?","^1M","^1A",5,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1C","^1K","^12","^1F","^70"]]]]],"^V",["^6",["^S","^U"]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha26272."],"~$dt",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",358,"^1<",8,"^1D",358,"^1E",10,"^1W",true,"^Y",["^Z",["^[",["^Z",[["^1K","~$x","^1C"],["^1K","~$x","^1C","~$cpred?"]]]]],"^3H",["^ ","^1=",false,"^3I",4,"^1A",4,"^19",["^Z",[["^1K","~$x","^1C"],["^1K","~$x","^1C","^73"]]],"^Y",["^Z",[["^1K","~$x","^1C"],["^1K","~$x","^1C","^73"]]],"^1;",["^Z",[null,null]]]],"^1W",true,"^=","~$cljs.spec.alpha/dt","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",10,"^3H",["^ ","^1=",false,"^3I",4,"^1A",4,"^19",["^Z",[["^1K","~$x","^1C"],["^1K","~$x","^1C","^73"]]],"^Y",["^Z",[["^1K","~$x","^1C"],["^1K","~$x","^1C","^73"]]],"^1;",["^Z",[null,null]]],"^19",["^Z",[["^1K","~$x","^1C"],["^1K","~$x","^1C","^73"]]],"^1:",null,"^3I",4,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^2Q",[["^ ","^3I",3,"^1=",false,"^1Q","^1H"],["^ ","^3I",4,"^1=",false,"^1Q",["^6",[null,"^1H","^2W"]]]],"^1>",358,"^1D",358,"^1A",4,"^1B",true,"^Y",["^Z",[["^1K","~$x","^1C"],["^1K","~$x","^1C","^73"]]]],"~$preturn",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1074,"^1<",8,"^1D",1074,"^1E",15,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$p"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/preturn","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",15,"^19",["^Z",[["~$p"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1074,"^1?",["^6",[null,"^1H","^2W","^3E","^2E"]],"^1D",1074,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$p"]]]]]],"~$re-conform",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1252,"^1<",8,"^1D",1252,"^1E",18,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$p",["~$x","~$&","~$xs","^59","~$data"]]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/re-conform","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",18,"^19",["^Z",[["~$p","~$p__26218"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1252,"^1?",["^6",[null,"^1H","^2W","^3E","^2E"]],"^1D",1252,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$p",["~$x","~$&","^78","^59","^79"]]]]]]],"~$spec?",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",74,"^1<",7,"^1D",74,"^1E",12,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]],"^16","returns x if x is a spec object, else logical false"],"^=","~$cljs.spec.alpha/spec?","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",12,"^19",["^Z",[["~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",74,"^1?",["^6",[null,"^2E"]],"^1D",74,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]],"^16","returns x if x is a spec object, else logical false"],"~$registry",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",318,"^1<",7,"^1D",318,"^1E",15,"^Y",["^Z",["^[",["^Z",[[]]]]],"^16","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"^=","~$cljs.spec.alpha/registry","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",15,"^19",["^Z",[[]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",318,"^1?","^1H","^1D",318,"^1A",0,"^1B",true,"^Y",["^Z",["^[",["^Z",[[]]]]],"^16","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"~$rep+impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1010,"^1<",19,"^1D",1010,"^1E",27,"^1J",true,"^Y",["^Z",["^[",["^Z",[["^1C","~$p"]]]]],"^16","Do not call this directly, use '+'"],"^=","~$cljs.spec.alpha/rep+impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",27,"^19",["^Z",[["^1C","~$p"]]],"^1:",null,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1010,"^1?",["^6",["^1H","^1X","^2E"]],"^1D",1010,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1C","~$p"]]]]],"^16","Do not call this directly, use '+'"],"~$deriv",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1123,"^1<",8,"^1D",1123,"^1E",13,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$p","~$x"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/deriv","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",13,"^19",["^Z",[["~$p","~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1123,"^1?",["^6",[null,"^1H","^1X","^2E"]],"^1D",1123,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$p","~$x"]]]]]],"~$deep-resolve",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",49,"^1<",8,"^1D",49,"^1E",20,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$reg","~$k"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/deep-resolve","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",20,"^19",["^Z",[["^7E","~$k"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",49,"^1D",49,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^7E","~$k"]]]]]],"~$exercise",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1433,"^1<",7,"^1D",1433,"^1E",15,"^Y",["^Z",["^[",["^Z",[["^1F"],["^1F","~$n"],["^1F","~$n","^6<"]]]]],"^16","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen","^3H",["^ ","^1=",false,"^3I",3,"^1A",3,"^19",["^Z",[["^1F"],["^1F","~$n"],["^1F","~$n","^6<"]]],"^Y",["^Z",[["^1F"],["^1F","~$n"],["^1F","~$n","^6<"]]],"^1;",["^Z",[null,null,null]]]],"^=","~$cljs.spec.alpha/exercise","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",15,"^3H",["^ ","^1=",false,"^3I",3,"^1A",3,"^19",["^Z",[["^1F"],["^1F","~$n"],["^1F","~$n","^6<"]]],"^Y",["^Z",[["^1F"],["^1F","~$n"],["^1F","~$n","^6<"]]],"^1;",["^Z",[null,null,null]]],"^19",["^Z",[["^1F"],["^1F","~$n"],["^1F","~$n","^6<"]]],"^1:",null,"^3I",3,"^1;",["^Z",[null,null,null]],"^1<",1,"^1=",false,"^2Q",[["^ ","^3I",1,"^1=",false,"^1Q","^1H"],["^ ","^3I",2,"^1=",false,"^1Q","^1H"],["^ ","^3I",3,"^1=",false,"^1Q","~$cljs.core/LazySeq"]],"^1>",1433,"^1D",1433,"^1A",3,"^1B",true,"^Y",["^Z",[["^1F"],["^1F","~$n"],["^1F","~$n","^6<"]]],"^16","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"],"~$t_cljs$spec$alpha26037",["^ ","^38",6,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^1@","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^39",true,"^P",true,"^1<",5,"^1>",780,"^3:",false,"^1Q","^3;","^V",["^6",["^S","^U"]]],"~$explain-data",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",226,"^1<",7,"^1D",226,"^1E",19,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"]]]]],"^16","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"^=","~$cljs.spec.alpha/explain-data","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",19,"^19",["^Z",[["^1F","~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",226,"^1?",["^6",["^1X","^2E"]],"^1D",226,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"]]]]],"^16","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"~$tuple-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",594,"^1<",19,"^1D",594,"^1E",29,"^1J",true,"^Y",["^Z",["^[",["^Z",[["^10","^11"],["^10","^11","^12"]]]]],"^16","Do not call this directly, use 'tuple'","^3H",["^ ","^1=",false,"^3I",3,"^1A",3,"^19",["^Z",[["^10","^11"],["^10","^11","^12"]]],"^Y",["^Z",[["^10","^11"],["^10","^11","^12"]]],"^1;",["^Z",[null,null]]]],"^=","~$cljs.spec.alpha/tuple-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",29,"^3H",["^ ","^1=",false,"^3I",3,"^1A",3,"^19",["^Z",[["^10","^11"],["^10","^11","^12"]]],"^Y",["^Z",[["^10","^11"],["^10","^11","^12"]]],"^1;",["^Z",[null,null]]],"^19",["^Z",[["^10","^11"],["^10","^11","^12"]]],"^1:",null,"^3I",3,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^2Q",[["^ ","^3I",2,"^1=",false,"^1Q","^1H"],["^ ","^3I",3,"^1=",false,"^1Q","^32"]],"^1>",594,"^1D",594,"^1A",3,"^1B",true,"^Y",["^Z",[["^10","^11"],["^10","^11","^12"]]],"^16","Do not call this directly, use 'tuple'"],"~$multi-spec-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",544,"^1<",19,"^1D",544,"^1E",34,"^1J",true,"^Y",["^Z",["^[",["^Z",[["^1C","^6L","^6M"],["^1C","^6L","^6M","^12"]]]]],"^16","Do not call this directly, use 'multi-spec'","^3H",["^ ","^1=",false,"^3I",4,"^1A",4,"^19",["^Z",[["^1C","^6L","^6M"],["^1C","^6L","^6M","^12"]]],"^Y",["^Z",[["^1C","^6L","^6M"],["^1C","^6L","^6M","^12"]]],"^1;",["^Z",[null,null]]]],"^=","~$cljs.spec.alpha/multi-spec-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",34,"^3H",["^ ","^1=",false,"^3I",4,"^1A",4,"^19",["^Z",[["^1C","^6L","^6M"],["^1C","^6L","^6M","^12"]]],"^Y",["^Z",[["^1C","^6L","^6M"],["^1C","^6L","^6M","^12"]]],"^1;",["^Z",[null,null]]],"^19",["^Z",[["^1C","^6L","^6M"],["^1C","^6L","^6M","^12"]]],"^1:",null,"^3I",4,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^2Q",[["^ ","^3I",3,"^1=",false,"^1Q","^1H"],["^ ","^3I",4,"^1=",false,"^1Q","^2U"]],"^1>",544,"^1D",544,"^1A",4,"^1B",true,"^Y",["^Z",[["^1C","^6L","^6M"],["^1C","^6L","^6M","^12"]]],"^16","Do not call this directly, use 'multi-spec'"],"~$->t_cljs$spec$alpha25970",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^10","^11","^12","^13","~$cnt","~$meta25971"]]]]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha25970.","^17",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha25970","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^19",["^Z",[["^10","^11","^12","^13","^7R","^7S"]]],"^1:",null,"^1;",["^Z",[null,null]],"^P",true,"^1<",6,"^1=",false,"^W","^X","^1>",600,"^1?","^32","^1A",6,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^10","^11","^12","^13","^7R","^7S"]]]]],"^V",["^6",["^S","^U"]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha25970."],"~$conform",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",168,"^1<",7,"^1D",168,"^1E",14,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"]]]]],"^16","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"^=","~$cljs.spec.alpha/conform","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",14,"^19",["^Z",[["^1F","~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",168,"^1?","^1H","^1D",168,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"]]]]],"^16","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"^6;",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",43,"^1<",4,"^1D",43,"^1E",8,"^56","^R","^16",null,"^Y",["^Z",["^[",["^Z",[["^1F","^6<","^2G","^53"]]]]]],"^56","^R","^=","~$cljs.spec.alpha/gen*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",8,"^19",["^Z",[["^1F","^6<","^2G","^53"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",39,"^1?","^1H","^1D",43,"^1A",4,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","^6<","^2G","^53"]]]]],"^16",null],"~$fspec-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1339,"^1<",19,"^1D",1339,"^1E",29,"^1J",true,"^Y",["^Z",["^[",["^Z",[["^5D","^5E","^5F","^5G","^5H","^5I","^12"]]]]],"^16","Do not call this directly, use 'fspec'"],"^=","~$cljs.spec.alpha/fspec-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",29,"^19",["^Z",[["^5D","^5E","^5F","^5G","^5H","^5I","^12"]]],"^1:",null,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1339,"^1?","^31","^1D",1339,"^1A",7,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^5D","^5E","^5F","^5G","^5H","^5I","^12"]]]]],"^16","Do not call this directly, use 'fspec'"],"~$->t_cljs$spec$alpha25979",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^:","^10","^11","^12","^29","~$kps","^13","^14","~$meta25980"]]]]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha25979.","^17",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha25979","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^19",["^Z",[["^:","^10","^11","^12","^29","^7[","^13","^14","^80"]]],"^1:",null,"^1;",["^Z",[null,null]],"^P",true,"^1<",5,"^1=",false,"^W","^X","^1>",697,"^1?","^2Y","^1A",9,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^:","^10","^11","^12","^29","^7[","^13","^14","^80"]]]]],"^V",["^6",["^S","^U"]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha25979."],"~$t_cljs$spec$alpha26272",["^ ","^38",5,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^1M","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^39",true,"^P",true,"^1<",5,"^1>",1411,"^3:",false,"^1Q","^3;","^V",["^6",["^S","^U"]]],"~$inck",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",355,"^1<",8,"^1D",355,"^1E",12,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$m","~$k"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/inck","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",12,"^19",["^Z",[["~$m","~$k"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",355,"^1?",["^6",["^3@","^1H"]],"^1D",355,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$m","~$k"]]]]]],"~$*coll-check-limit*",["^ ","^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",31,"^1<",16,"^1D",31,"^1E",34,"^1O",true],"^=","~$cljs.spec.alpha/*coll-check-limit*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",34,"^1<",1,"^1O",true,"^1>",31,"^1D",31,"^1Q","^1R","^16","The number of items validated in a collection spec'ed with 'every'"],"~$get-spec",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",330,"^1<",7,"^1D",330,"^1E",15,"^Y",["^Z",["^[",["^Z",[["~$k"]]]]],"^16","Returns spec registered for keyword/symbol/var k, or nil."],"^=","~$cljs.spec.alpha/get-spec","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",15,"^19",["^Z",[["~$k"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",330,"^1?",["^6",["^1H","^2E"]],"^1D",330,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$k"]]]]],"^16","Returns spec registered for keyword/symbol/var k, or nil."],"~$gensub",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",282,"^1<",8,"^1D",282,"^1E",14,"^1W",true,"^Y",["^Z",["^[",["^Z",[["^1F","^6<","^2G","^53","^1C"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/gensub","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",14,"^19",["^Z",[["^1F","^6<","^2G","^53","^1C"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",282,"^1?","^1H","^1D",282,"^1A",5,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","^6<","^2G","^53","^1C"]]]]]],"~$the-spec",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",116,"^1<",8,"^1D",116,"^1E",16,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$spec-or-k"]]]]],"^16","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"^1W",true,"^=","~$cljs.spec.alpha/the-spec","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",16,"^19",["^Z",[["^8<"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",116,"^1?",["^6",["^1H","^2E"]],"^1D",116,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^8<"]]]]],"^16","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"~$coll-prob",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",793,"^1<",8,"^1D",793,"^1E",17,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$x","~$kfn","~$kform","~$distinct","~$count","^6V","~$max-count","^2G","^2H","^2I"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/coll-prob","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",17,"^19",["^Z",[["~$x","^8?","^8@","^8A","^8B","^6V","^8C","^2G","^2H","^2I"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",793,"^1?",["^6",["^2L","^1H","^2E"]],"^1D",793,"^1A",10,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$x","^8?","^8@","^8A","^8B","^6V","^8C","^2G","^2H","^2I"]]]]]],"~$every-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",843,"^1<",19,"^1D",843,"^1E",29,"^1J",true,"^Y",["^Z",["^[",["^Z",[["^1C","^1K","~$opts"],["^1C","^1K",["^ ","~$conform-into","~:into","~$describe-form","~:cljs.spec.alpha/describe","^4V",["~$kind","~:cljs.spec.alpha/kind-form","^8B","^8C","^6V","^8A","~$gen-max","~:cljs.spec.alpha/kfn","~:cljs.spec.alpha/cpred","~$conform-keys","~:cljs.spec.alpha/conform-all"],"~:or",["^ ","^8M",20],"^59","^8F"],"^12"]]]]],"^16","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'","^3H",["^ ","^1=",false,"^3I",4,"^1A",4,"^19",["^Z",[["^1C","^1K","^8F"],["^1C","^1K",["^ ","^8G","^8H","^8I","^8J","^4V",["^8K","^8L","^8B","^8C","^6V","^8A","^8M","^8N","^8O","^8P","^8Q"],"^8R",["^ ","^8M",20],"^59","^8F"],"^12"]]],"^Y",["^Z",[["^1C","^1K","^8F"],["^1C","^1K",["^ ","^8G","^8H","^8I","^8J","^4V",["^8K","^8L","^8B","^8C","^6V","^8A","^8M","^8N","^8O","^8P","^8Q"],"^8R",["^ ","^8M",20],"^59","^8F"],"^12"]]],"^1;",["^Z",[null,null]]]],"^=","~$cljs.spec.alpha/every-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",29,"^3H",["^ ","^1=",false,"^3I",4,"^1A",4,"^19",["^Z",[["^1C","^1K","^8F"],["^1C","^1K",["^ ","^8G","^8H","^8I","^8J","^4V",["^8K","^8L","^8B","^8C","^6V","^8A","^8M","^8N","^8O","^8P","^8Q"],"^8R",["^ ","^8M",20],"^59","^8F"],"^12"]]],"^Y",["^Z",[["^1C","^1K","^8F"],["^1C","^1K",["^ ","^8G","^8H","^8I","^8J","^4V",["^8K","^8L","^8B","^8C","^6V","^8A","^8M","^8N","^8O","^8P","^8Q"],"^8R",["^ ","^8M",20],"^59","^8F"],"^12"]]],"^1;",["^Z",[null,null]]],"^19",["^Z",[["^1C","^1K","^8F"],["^1C","^1K",["^ ","^8G","^8H","^8I","^8J","^4V",["^8K","^8L","^8B","^8C","^6V","^8A","^8M","^8N","^8O","^8P","^8Q"],"^8R",["^ ","^8M",20],"^59","^8F"],"^12"]]],"^1:",null,"^3I",4,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^2Q",[["^ ","^3I",3,"^1=",false,"^1Q","^1H"],["^ ","^3I",4,"^1=",false,"^1Q","^2V"]],"^1>",843,"^1D",843,"^1A",4,"^1B",true,"^Y",["^Z",[["^1C","^1K","^8F"],["^1C","^1K",["^ ","^8G","^8H","^8I","^8J","^4V",["^8K","^8L","^8B","^8C","^6V","^8A","^8M","^8N","^8O","^8P","^8Q"],"^8R",["^ ","^8M",20],"^59","^8F"],"^12"]]],"^16","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"],"~$accept-nil?",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1060,"^1<",8,"^1D",1060,"^1E",19,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$p"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/accept-nil?","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",19,"^19",["^Z",[["~$p"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1060,"^1?",["^6",["^3K","^1H","^2E"]],"^1D",1060,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$p"]]]]]],"~$t_cljs$spec$alpha26269",["^ ","^38",2,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^30","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^39",true,"^P",true,"^1<",5,"^1>",1391,"^3:",false,"^1Q","^3;","^V",["^6",["^S","^U"]]],"~$maybe-spec",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",105,"^1<",8,"^1D",105,"^1E",18,"^1W",true,"^Y",["^Z",["^[",["^Z",[["^8<"]]]]],"^16","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"^1W",true,"^=","~$cljs.spec.alpha/maybe-spec","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",18,"^19",["^Z",[["^8<"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",105,"^1?",["^6",[null,"^3@","^1H","^2W","^35","^5P","^2E"]],"^1D",105,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^8<"]]]]],"^16","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"~$spec-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",511,"^1<",19,"^1D",511,"^1E",28,"^1J",true,"^Y",["^Z",["^[",["^Z",[["^1C","^1K","^12","^73"],["^1C","^1K","^12","^73","~$unc"]]]]],"^16","Do not call this directly, use 'spec'","^3H",["^ ","^1=",false,"^3I",5,"^1A",5,"^19",["^Z",[["^1C","^1K","^12","^73"],["^1C","^1K","^12","^73","^8Z"]]],"^Y",["^Z",[["^1C","^1K","^12","^73"],["^1C","^1K","^12","^73","^8Z"]]],"^1;",["^Z",[null,null]]]],"^=","~$cljs.spec.alpha/spec-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",28,"^3H",["^ ","^1=",false,"^3I",5,"^1A",5,"^19",["^Z",[["^1C","^1K","^12","^73"],["^1C","^1K","^12","^73","^8Z"]]],"^Y",["^Z",[["^1C","^1K","^12","^73"],["^1C","^1K","^12","^73","^8Z"]]],"^1;",["^Z",[null,null]]],"^19",["^Z",[["^1C","^1K","^12","^73"],["^1C","^1K","^12","^73","^8Z"]]],"^1:",null,"^3I",5,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^2Q",[["^ ","^3I",4,"^1=",false,"^1Q","^1H"],["^ ","^3I",5,"^1=",false,"^1Q",["^6",[null,"^3@","^1H","^36","^2E"]]]],"^1>",511,"^1D",511,"^1A",5,"^1B",true,"^Y",["^Z",[["^1C","^1K","^12","^73"],["^1C","^1K","^12","^73","^8Z"]]],"^16","Do not call this directly, use 'spec'"],"~$invalid?",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",163,"^1<",7,"^1D",163,"^1E",15,"^Y",["^Z",["^[",["^Z",[["^3C"]]]]],"^16","tests the validity of a conform return value"],"^=","~$cljs.spec.alpha/invalid?","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",15,"^19",["^Z",[["^3C"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",163,"^1?","^3K","^1D",163,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^3C"]]]]],"^16","tests the validity of a conform return value"],"~$amp-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1015,"^1<",19,"^1D",1015,"^1E",27,"^1J",true,"^Y",["^Z",["^[",["^Z",[["^3V","~$re-form","^11","^2>"]]]]],"^16","Do not call this directly, use '&'"],"^=","~$cljs.spec.alpha/amp-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",27,"^19",["^Z",[["^3V","^93","^11","^2>"]]],"^1:",null,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1015,"^1?","^1X","^1D",1015,"^1A",4,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^3V","^93","^11","^2>"]]]]],"^16","Do not call this directly, use '&'"],"~$pcat*",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",982,"^1<",8,"^1D",982,"^1E",13,"^1W",true,"^Y",["^Z",["^[",["^Z",[[["~#cmap",[["^4B","~$&","~$pr","^59","^3>"],"~:ps",["~$k1","~$&","~$kr","^59","^3="],"~:ks",["~$f1","~$&","~$fr","^59","^10"],"~:forms","^3C","~:ret","~$rep+","~:rep+"]]]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/pcat*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",13,"^19",["^Z",[["~$p__26115"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",982,"^1?",["^6",["^1H","^1X","^2E"]],"^1D",982,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[[["^96",[["^4B","~$&","^97","^59","^3>"],"^98",["^99","~$&","^9:","^59","^3="],"^9;",["^9<","~$&","^9=","^59","^10"],"^9>","^3C","^9?","^9@","^9A"]]]]]]]],"~$alt*",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1029,"^1<",8,"^1D",1029,"^1E",12,"^1W",true,"^Y",["^Z",["^[",["^Z",[["^3>","^3=","^10"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/alt*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",12,"^19",["^Z",[["^3>","^3=","^10"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1029,"^1?",["^6",["^1H","^1X","^2E"]],"^1D",1029,"^1A",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^3>","^3=","^10"]]]]]],"~$cat-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",994,"^1<",19,"^1D",994,"^1E",27,"^1J",true,"^Y",["^Z",["^[",["^Z",[["^3=","^3>","^10"]]]]],"^16","Do not call this directly, use 'cat'"],"^=","~$cljs.spec.alpha/cat-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",27,"^19",["^Z",[["^3=","^3>","^10"]]],"^1:",null,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",994,"^1?",["^6",["^1H","^1X","^2E"]],"^1D",994,"^1A",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^3=","^3>","^10"]]]]],"^16","Do not call this directly, use 'cat'"],"~$macroexpand-check",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",337,"^1<",8,"^1D",337,"^1E",25,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$v","~$args"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/macroexpand-check","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",25,"^19",["^Z",[["~$v","^9I"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",337,"^1?","^2E","^1D",337,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$v","^9I"]]]]]],"~$reg-resolve",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",55,"^1<",8,"^1D",55,"^1E",19,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$k"]]]]],"^16","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"^1W",true,"^=","~$cljs.spec.alpha/reg-resolve","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",19,"^19",["^Z",[["~$k"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",55,"^1?",["^6",[null,"^1H","^2E"]],"^1D",55,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$k"]]]]],"^16","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"~$explain-str",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",275,"^1<",7,"^1D",275,"^1E",18,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"]]]]],"^16","Given a spec and a value that fails to conform, returns an explanation as a string."],"^=","~$cljs.spec.alpha/explain-str","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",18,"^19",["^Z",[["^1F","~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",275,"^1?","~$string","^1D",275,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"]]]]],"^16","Given a spec and a value that fails to conform, returns an explanation as a string."],"~$*compile-asserts*",["^ ","^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1474,"^1<",3,"^1D",1474,"^1E",20,"^1O",true,"^16","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"^=","~$cljs.spec.alpha/*compile-asserts*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",20,"^1<",1,"^1O",true,"^1>",1467,"^1D",1474,"^1Q","^3K","^16","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"~$t_cljs$spec$alpha26244",["^ ","^38",9,"^Q",["^6",["^R","^S","^T","^U","^5C"]],"^=","^31","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^39",true,"^P",true,"^1<",5,"^1>",1343,"^3:",false,"^1Q","^3;","^V",["^6",["^S","^U","^5C"]]],"~$with-gen",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",211,"^1<",7,"^1D",211,"^1E",15,"^Y",["^Z",["^[",["^Z",[["^1F","~$gen-fn"]]]]],"^16","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^=","~$cljs.spec.alpha/with-gen","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",15,"^19",["^Z",[["^1F","^9T"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",211,"^1?",["^6",["^3@","^1H"]],"^1D",211,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","^9T"]]]]],"^16","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^68",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",40,"^1<",4,"^1D",40,"^1E",12,"^56","^R","^16",null,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"]]]]]],"^56","^R","^=","~$cljs.spec.alpha/conform*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",12,"^19",["^Z",[["^1F","~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",39,"^1?","^1H","^1D",40,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","~$x"]]]]],"^16",null],"~$check-asserts?",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1482,"^1<",16,"^1D",1482,"^1E",30,"^1Q","^3K","^Y",["^Z",["^[",["^Z",[[]]]]],"^16","Returns the value set by check-asserts."],"^=","~$cljs.spec.alpha/check-asserts?","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",30,"^19",["^Z",[[]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1482,"^1?","^3K","^1D",1482,"^1A",0,"^1Q","^3K","^1B",true,"^Y",["^Z",["^[",["^Z",[[]]]]],"^16","Returns the value set by check-asserts."],"~$noret?",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1052,"^1<",8,"^1D",1052,"^1E",14,"^1W",true,"^Y",["^Z",["^[",["^Z",[["^4B","~$pret"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/noret?","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",14,"^19",["^Z",[["^4B","^9Z"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1052,"^1?",["^6",["^3K","^1H","^2E"]],"^1D",1052,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^4B","^9Z"]]]]]],"~$rep-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1006,"^1<",19,"^1D",1006,"^1E",27,"^1J",true,"^Y",["^Z",["^[",["^Z",[["^1C","~$p"]]]]],"^16","Do not call this directly, use '*'"],"^=","~$cljs.spec.alpha/rep-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",27,"^19",["^Z",[["^1C","~$p"]]],"^1:",null,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1006,"^1?",["^6",["^3@","^1H","^2E"]],"^1D",1006,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1C","~$p"]]]]],"^16","Do not call this directly, use '*'"],"~$op-describe",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1143,"^1<",8,"^1D",1143,"^1E",19,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$p"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/op-describe","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",19,"^19",["^Z",[["~$p"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1143,"^1?",["^6",[null,"^3@","^1H","^2E"]],"^1D",1143,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$p"]]]]]],"~$describe",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",206,"^1<",7,"^1D",206,"^1E",15,"^Y",["^Z",["^[",["^Z",[["^1F"]]]]],"^16","returns an abbreviated description of the spec as data"],"^=","~$cljs.spec.alpha/describe","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",15,"^19",["^Z",[["^1F"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",206,"^1?",["^6",[null,"^1H","^35"]],"^1D",206,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F"]]]]],"^16","returns an abbreviated description of the spec as data"],"~$explain-1",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",387,"^1<",8,"^1D",387,"^1E",17,"^1W",true,"^Y",["^Z",["^[",["^Z",[["^1C","^1K","^2G","^2H","^2I","~$v"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/explain-1","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",17,"^19",["^Z",[["^1C","^1K","^2G","^2H","^2I","~$v"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",387,"^1?",["^6",["^2L","^1H"]],"^1D",387,"^1A",6,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1C","^1K","^2G","^2H","^2I","~$v"]]]]]],"~$explain-out",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",264,"^1<",7,"^1D",264,"^1E",18,"^Y",["^Z",["^[",["^Z",[["^2C"]]]]],"^16","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"^=","~$cljs.spec.alpha/explain-out","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",18,"^19",["^Z",[["^2C"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",264,"^1?","^1H","^1D",264,"^1A",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^2C"]]]]],"^16","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"~$re-gen",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1214,"^1<",8,"^1D",1214,"^1E",14,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$p","^6<","^2G","^53","~$f"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/re-gen","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",14,"^19",["^Z",[["~$p","^6<","^2G","^53","~$f"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1214,"^1?",["^6",["^1H","^2E"]],"^1D",1214,"^1A",5,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$p","^6<","^2G","^53","~$f"]]]]]],"~$filter-alt",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1020,"^1<",8,"^1D",1020,"^1E",18,"^1W",true,"^Y",["^Z",["^[",["^Z",[["^3>","^3=","^10","~$f"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/filter-alt","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",18,"^19",["^Z",[["^3>","^3=","^10","~$f"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1020,"^1?","^2L","^1D",1020,"^1A",4,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^3>","^3=","^10","~$f"]]]]]],"~$t_cljs$spec$alpha25889",["^ ","^38",19,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^2A","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^39",true,"^P",true,"^1<",5,"^1>",430,"^3:",false,"^1Q","^3;","^V",["^6",["^S","^U"]]],"~$and-preds",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",726,"^1<",8,"^1D",726,"^1E",17,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$x","^11","^10"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/and-preds","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",17,"^19",["^Z",[["~$x","^11","^10"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",726,"^1?",["^6",[null,"^2W"]],"^1D",726,"^1A",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$x","^11","^10"]]]]]],"~$->t_cljs$spec$alpha26051",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^10","^11","^12","~$meta26052"]]]]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha26051.","^17",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha26051","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^19",["^Z",[["^10","^11","^12","^:B"]]],"^1:",null,"^1;",["^Z",[null,null]],"^P",true,"^1<",3,"^1=",false,"^W","^X","^1>",816,"^1?","^2X","^1A",4,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^10","^11","^12","^:B"]]]]],"^V",["^6",["^S","^U"]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha26051."],"~$call-valid?",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1318,"^1<",8,"^1D",1318,"^1E",19,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$f","^13","^9I"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/call-valid?","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",19,"^19",["^Z",[["~$f","^13","^9I"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1318,"^1?",["^6",["^3K","^2E"]],"^1D",1318,"^1A",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$f","^13","^9I"]]]]]],"~$op-unform",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1089,"^1<",8,"^1D",1089,"^1E",17,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$p","~$x"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/op-unform","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",17,"^19",["^Z",[["~$p","~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1089,"^1?",["^6",["^2L","^1H"]],"^1D",1089,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$p","~$x"]]]]]],"~$->t_cljs$spec$alpha25945",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^1C","^1K","^12","^73","^8Z","~$meta25946"]]]]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha25945.","^17",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha25945","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^19",["^Z",[["^1C","^1K","^12","^73","^8Z","^:I"]]],"^1:",null,"^1;",["^Z",[null,null]],"^P",true,"^1<",6,"^1=",false,"^W","^X","^1>",520,"^1?","^36","^1A",6,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1C","^1K","^12","^73","^8Z","^:I"]]]]],"^V",["^6",["^S","^U"]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha25945."],"~$rep*",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",999,"^1<",8,"^1D",999,"^1E",12,"^1W",true,"^Y",["^Z",["^[",["^Z",[["^4B","^4C","^3C","~$splice","^1C"]]]]]],"^1W",true,"^=","~$cljs.spec.alpha/rep*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",12,"^19",["^Z",[["^4B","^4C","^3C","^:L","^1C"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",999,"^1?",["^6",["^3@","^1H","^2E"]],"^1D",999,"^1A",5,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^4B","^4C","^3C","^:L","^1C"]]]]]],"^2R",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",132,"^1<",4,"^1D",132,"^1E",12,"^56","^T","^16",null,"^Y",["^Z",["^[",["^Z",[["~$_"],["~$_","^1C"]]]]],"^3H",["^ ","^1=",false,"^3I",2,"^1A",2,"^19",["^Z",[["~$_"],["~$_","^1C"]]],"^Y",["^Z",[["~$_"],["~$_","^1C"]]],"^1;",["^Z",[null,null]]]],"^56","^T","^=","~$cljs.spec.alpha/specize*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",12,"^3H",["^ ","^1=",false,"^3I",2,"^1A",2,"^19",["^Z",[["~$_"],["~$_","^1C"]]],"^Y",["^Z",[["~$_"],["~$_","^1C"]]],"^1;",["^Z",[null,null]]],"^19",["^Z",[["~$_"],["~$_","^1C"]]],"^1:",null,"^3I",2,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^2Q",[["^ ","^3I",1,"^1=",false,"^1Q","^1H"],["^ ","^3I",2,"^1=",false,"^1Q","^1H"]],"^1>",131,"^1D",132,"^1A",2,"^1B",true,"^Y",["^Z",[["~$_"],["~$_","^1C"]]],"^16",null],"~$maybe-impl",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1048,"^1<",19,"^1D",1048,"^1E",29,"^1J",true,"^Y",["^Z",["^[",["^Z",[["~$p","^1C"]]]]],"^16","Do not call this directly, use '?'"],"^=","~$cljs.spec.alpha/maybe-impl","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",29,"^19",["^Z",[["~$p","^1C"]]],"^1:",null,"^1J",true,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1048,"^1?",["^6",["^3@","^1H"]],"^1D",1048,"^1A",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$p","^1C"]]]]],"^16","Do not call this directly, use '?'"],"~$pcat",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",992,"^1<",8,"^1D",992,"^1E",12,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$&","^3>"]]]]],"^3H",["^ ","^1=",true,"^3I",0,"^1A",0,"^19",[["^Z",["^3>"]]],"^Y",["^Z",[["~$&","^3>"]]],"^1;",["^Z",[null]]]],"^1W",true,"^=","~$cljs.spec.alpha/pcat","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",12,"^3H",["^ ","^1=",true,"^3I",0,"^1A",0,"^19",[["^Z",["^3>"]]],"^Y",["^Z",[["~$&","^3>"]]],"^1;",["^Z",[null]]],"^19",[["^Z",["^3>"]]],"^1:",null,"^3I",0,"^1;",["^Z",[null]],"^1<",1,"^1=",true,"^2Q",[["^ ","^3I",0,"^1=",true,"^1Q",["^6",["^1H","^1X","^2E"]]]],"^1>",992,"^1?","^1H","^1D",992,"^1A",0,"^1B",true,"^Y",["^Z",[["~$&","^3>"]]]],"^6:",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",42,"^1<",4,"^1D",42,"^1E",12,"^56","^R","^16",null,"^Y",["^Z",["^[",["^Z",[["^1F","^2G","^2H","^2I","~$x"]]]]]],"^56","^R","^=","~$cljs.spec.alpha/explain*","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",12,"^19",["^Z",[["^1F","^2G","^2H","^2I","~$x"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",39,"^1?","^1H","^1D",42,"^1A",5,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1F","^2G","^2H","^2I","~$x"]]]]],"^16",null],"~$->t_cljs$spec$alpha26063",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^1C","^8C","~$map__26061","~$check?","~$p__26060","^12","^8M","^1K","~$cpred","^8P","~$kind-form","~$addcv","~$cfns","^8I","^8A","^1F","^8?","~$gen-into","^8B","^6V","^8F","^8K","~$conform-all","^8G","~$meta26064"]]]]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha26063.","^17",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha26063","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^19",["^Z",[["^1C","^8C","^:U","^:V","^:W","^12","^8M","^1K","^:X","^8P","^:Y","^:Z","^:[","^8I","^8A","^1F","^8?","^;0","^8B","^6V","^8F","^8K","^;1","^8G","^;2"]]],"^1:",null,"^1;",["^Z",[null,null]],"^P",true,"^1<",6,"^1=",false,"^W","^X","^1>",881,"^1?","^2V","^1A",25,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1C","^8C","^:U","^:V","^:W","^12","^8M","^1K","^:X","^8P","^:Y","^:Z","^:[","^8I","^8A","^1F","^8?","^;0","^8B","^6V","^8F","^8K","^;1","^8G","^;2"]]]]],"^V",["^6",["^S","^U"]],"^16","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha26063."],"~$validate-fn",["^ ","^N",null,"^O",["^ ","^17","/Users/raywai/clojure-spelling-bee/resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1>",1329,"^1<",8,"^1D",1329,"^1E",19,"^1W",true,"^Y",["^Z",["^[",["^Z",[["~$f","^13","~$iters"]]]]],"^16","returns f if valid, else smallest"],"^1W",true,"^=","~$cljs.spec.alpha/validate-fn","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^1E",19,"^19",["^Z",[["~$f","^13","^;5"]]],"^1:",null,"^1;",["^Z",[null,null]],"^1<",1,"^1=",false,"^1>",1329,"^1?",["^6",[null,"^1H","^2E"]],"^1D",1329,"^1A",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$f","^13","^;5"]]]]],"^16","returns f if valid, else smallest"],"~$t_cljs$spec$alpha26063",["^ ","^38",25,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^2V","^17","resources/public/cljs-out/dev/cljs/spec/alpha.cljs","^39",true,"^P",true,"^1<",6,"^1>",881,"^3:",false,"^1Q","^3;","^V",["^6",["^S","^U"]]]],"~:cljs.spec/registry-ref",[["~:cljs.spec.alpha/kvs->map",["^Z",["~$cljs.spec.alpha/conformer",["^Z",["~$fn*",["~$p1__26263#"],["^Z",["~$cljs.core/zipmap",["^Z",["~$cljs.core/map","~:cljs.spec.alpha/k","^;<"]],["^Z",["^;>","~:cljs.spec.alpha/v","^;<"]]]]]],["^Z",["^;;",["~$p1__26264#"],["^Z",["^;>",["^Z",["~$cljs.core/fn",[["~$k","~$v"]],["^ ","^;?","~$k","^;@","~$v"]]],"^;A"]]]]]]]],"~:require-macros",["^ ","~$c","^A","^A","^A","~$s","^>","^>","^>","^F","^G","^G","^G"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^1C","^3B","^8C","~:args","~:cljs.spec.alpha/failure","~$cljs.spec.alpha/*","~:max-tries","~:path","~:req-un","~:opt-un","^6P","^8Z","~$cljs.spec.alpha/+","~:p2","^9?","~:cljs.spec.alpha/unknown","~$cljs.core/sequential?","~:cljs.spec.alpha/value","~:gfn","~:cljs.spec.alpha/recursion-limit","~:cljs.spec.alpha/name","^6S","^5J","~:pred-exprs","^8H","~:keys-pred","~:gen-max","^:U","~:shrunk","~:fn","~$cljs.spec.alpha/alt","~$cljs.core/vector?","^6N","^9A","~$cljs.core/=","~:opt-keys","^5E","^1Z","~:cljs.spec.alpha/rep","~:pred","^6O","^70","~:splice","^:V","^10","^1[","~:cljs.spec.alpha/accept","^5D","~:else","^;2","^9;","~$cljs.core/count","~$cljs.spec.alpha/and","^20","^21","~$cljs.spec.alpha/cat","~:_","^8L","~:maybe","^:W","~:via","~$cljs.spec.alpha/every","~:req-specs","~$cljs.spec.alpha/or","^12","~:cljs.spec.alpha/gfn","^8M","^;<","^5H","^22","~$v","~:cljs.spec.alpha/spec","^23","~:conform-keys","^24","^;A","^3M","^73","^7S","~$cljs.spec.alpha/fspec","^25","~$fn","~:amp","^49","^5I","^4W","~$cljs.spec.alpha/nilable","^26","^;@","~$cljs.spec.alpha/tuple","^1K","~$cljs.core/map?","^8O","~:p1","^;=","~:cljs.spec.alpha/problems","^:X","~$%","^;>","^;9","~$method","~:distinct","^15","^27","^8","~$cljs.spec.alpha/keys","^3V","^8P","^7[","~:reason","~$cljs.spec.alpha/merge","~:cljs.spec.alpha/invalid","^11","^:Y","~:req","^:Z","^:[","~$nil?","^2?","~:assertion-failed","^;;","~$cljs.core/<=","^6C","^80","~:cljs.spec.alpha/amp","~:id","^8I","~:min-count","~:kind","~:smallest","~$cljs.core/set?","~:count","^7R","~$cljs.core/nil?","^6L","~:req-keys","^6M","~$k","^;?","^;B","~$cljs.core/list?","^8A","^5F","~:opt-specs","^:I","~:cljs.spec.alpha/args","^5G","~$ifn?","~:pred-forms","^28","^1F","^:","~$distinct?","~:max-count","^8?","^8N","~:max-elements","^;0","~$cljs.spec.alpha/multi-spec","~$cljs.core/coll?","^29","~:num-elements","^13","^8B","^:B","^2:","~$apply","^6V","^8F","^8K","^14","~:min-elements","^2;","^2<","^;1","^8Q","~:cljs.spec.alpha/alt","~$cljs.core/or","^9>","~:cljs.spec.alpha/pred","^;","~:cljs.spec.alpha/nil","^98","^2=","^;:","~:in","^8J","^8G","~:accept","~$cljs.spec.alpha/&","~:opt","~:cljs.spec.alpha/pcat","^2>","~$cljs.spec.alpha/?"]],"~:order",["^4W","^;T","^;O","^<O","^<C","~~:_","^=G","^;Z","^=C","^;B","^=?","^<[","^;P","^3V","^6S","^;Y","^<X","^;X","^=<","^=4","^<B","^5D","^5E","^5F","^5G","^5H","^5I","^5J","^;9","^;:","^;;","^;<","^;=","^;>","^;?","^;@","^;A","~$k","~$v","^6C","^3M","^=@","^<Q","^<E","^70","^;G","^<R"]],"^16",null]